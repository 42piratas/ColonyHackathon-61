{"version":3,"sources":["app/api.js","app/components/App.jsx","app/components/footer.js","app/components/header.js","app/components/home.js","app/components/main.js","app/components/organization.js","app/components/profile.js","app/components/projects.js","app/initialize.js"],"names":["ProjectsAPI","projects","all","App","Footer","marginTop","Header","marginBottom","Home","Main","Projects","Organization","Profile","require","MyComponent","props","state","meta","colony_1","colony_2","fetchColony","providers","Wallet","EthersAdapter","default","TrufflepigLoader","ColonyNetworkClient","loader","provider","JsonRpcProvider","getAccount","privateKey","wallet","adapter","networkClient","init","getMetaColonyClient","metaColonyClient","metaColonyAddress","contract","address","console","log","setState","bind","getColonyClient","colonyClient","colonyAddress","colonyClient_2","colonyAddress_2","data","colony","React","Component","token","colony_id","colony_add","createToken","name","symbol","tokenAddress","createColony","send","eventData","colonyId","map","project","number","org","desc","timeadded","tasks","task","document","getElementById"],"mappings":"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","file":"public/js/app.js","sourcesContent":["const ProjectsAPI = {\nprojects : [{\n        \"org\": { // First Project in list\n            \"name\": \"Organization 1\", // Organization Name\n            \"desc\": \"Donec maximus dolor sed leo faucibus, at tincidunt odio ornare. Vestibulum ac congue elit.\" // Organization Description\n        },\n        \"number\": 1,\n        \"name\": \"Project 1\", // Project Name\n        \"desc\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \", // Project Description\n        \"tasks\": [{ // List of tasks\n            \"number\": 1,\n            \"name\": \"Task 1\", // First Task Name\n            \"desc\": \"Cras cursus sit amet ante ut laoreet.\" // Task Description\n        }, {\n            \"number\": 2,\n            \"name\": \"Task 2\", // Second task Name\n            \"desc\": \"Fusce sed commodo erat.\" // Second task decription\n        }]\n    }, {\n        \"org\": { // Second Project\n            \"name\": \"Organization 2\",\n            \"desc\": \" Curabitur vitae venenatis libero, ac tincidunt sapien.\"\n        },\n        \"number\": 2,\n        \"name\": \"Project 2\",\n        \"desc\": \"Maecenas faucibus, neque quis eleifend luctus\",\n        \"tasks\": [{\n            \"number\": 1,\n            \"name\": \"Task 1\",\n            \"desc\": \"Praesent rutrum aliquam suscipit.\"\n        }, {\n            \"number\": 2,\n            \"name\": \"Task 2\",\n            \"desc\": \"Curabitur egestas massa in risus scelerisque consectetur.\"\n        }]\n    }],\n  all: function() { return this.projects},\n}\n\nexport default ProjectsAPI","import React from 'react';\nimport Header from './header';\nimport Main from './main';\nimport Footer from './footer';\n\n\nconst App = () => (\n  <div>\n    <Header />\n    <Main />\n    <Footer />\n  </div>\n)\n\nexport default App","import React from 'react'\n\nconst Footer = () => (\n<footer className=\"footer pt-100 is-white\" style={{marginTop: 2 + 'em'}}>\n  <div className=\"container\">\n    <div className=\"content has-text-centered\">\n      <p><strong>Chain Reaction</strong>, a Skilled Volunteerism Colony for <a href=\"https://colony.io/hackathon/\">ColonyJS Hackathon</a></p>\n    </div>\n  </div>\n</footer>\n)\n\nexport default Footer","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => (\n<header style={{marginBottom: 2 + 'em'}}>\n    <section className=\"column is-desktop\">\n      <nav className=\"navbar is-white is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"container is-desktop\">\n          <div className=\"navbar-brand\"><a className=\"navbar-item\"><img src=\"img/chainrxn_logo.png\" width=\"112\" height=\"28\" alt=\"Logo\"/></a></div>\n          <div className=\"navbar-menu\">\n              <div className=\"navbar-end\">\n                <div className=\"navbar-item\"><Link to='/'>Home</Link></div>\n                <div className=\"navbar-item\"><Link to='/projects'>Explore Projects</Link></div>\n                <div className=\"navbar-item\"><Link to='/organization'>Organization</Link></div>\n                <div className=\"navbar-item\"><Link to='/profile'>Profile</Link></div>\n              </div>\n          </div>\n        </div>\n      </nav>\n    </section>\n    <section>\n      <div className=\"hero is-info\">\n        <div className=\"hero-body is-desktop\">\n          <div className=\"container\">\n            <h1 className=\"title\">Chain Reaction</h1>\n          </div>\n        </div>\n      </div>\n    </section>\n</header>\n)\n\nexport default Header","import React from 'react'\n\nconst Home = () => (\n      <section className=\"pt-60 pb-60\">\n      <div className=\"container\">\n        <div className=\"content has-text-centered\">\n            <h1>Proof of Concept</h1>\n            <p><b>Chain Reaction</b> is a skilled volunteerism distributed autonomous organisation (DAO)</p>\n            <p>Built on <b>ColonyJS</b> and the <b>Colony Network</b></p>\n        </div>\n      </div>\n    </section>\n)\n\nexport default Home","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './home';\nimport Projects from './projects';\nimport Organization from './organization';\nimport Profile from './profile';\n\nconst Main = () => (\n  <main>\n    <Switch>\n      <Route exact path='/' component={Home}/>\n      <Route path='/projects' component={Projects}/>\n      <Route path='/organization' component={Organization}/>\n      <Route path='/profile' component={Profile}/>\n    </Switch>\n  </main>\n)\n\nexport default Main\n","require(\"babel-core/register\");\nrequire(\"babel-polyfill\");\n\nimport React from 'react'\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      meta: null,\n      colony_1: null,\n      colony_2: null\n    }\n  }\n\n  componentDidMount() {\n    this.fetchColony()\n  }\n\n  async fetchColony() {\n    // Import the prerequisites\n    const { providers, Wallet } = require('ethers');\n    const { default: EthersAdapter } = require('@colony/colony-js-adapter-ethers');\n    const { TrufflepigLoader } = require('@colony/colony-js-contract-loader-http');\n    // Import the ColonyNetworkClient\n    const { default: ColonyNetworkClient } = require('@colony/colony-js-client');\n    // Create an instance of the Trufflepig contract loader\n    const loader = new TrufflepigLoader();\n    // Create a provider for local TestRPC (Ganache)\n    const provider = new providers.JsonRpcProvider('http://localhost:8545/');\n    // Get the private key from the first account from the ganache-accounts\n    // through trufflepig\n    const { privateKey } = await loader.getAccount(0);\n\n    // Create a wallet with the private key (so we have a balance we can use)\n    const wallet = new Wallet(privateKey, provider);\n\n    // Create an adapter (powered by ethers)\n    const adapter = new EthersAdapter({\n      loader,\n      provider,\n      wallet,\n    });\n\n    // Connect to ColonyNetwork with the adapter!\n    const networkClient = new ColonyNetworkClient({ adapter });\n    await networkClient.init();\n\n    // Or alternatively, just its address:\n    // const colonyClient = await networkClient.getColonyClientByAddress(colonyAddress);\n\n    // You can also get the Meta Colony:\n    const metaColonyClient = await networkClient.getMetaColonyClient();\n    const metaColonyAddress = metaColonyClient.contract.address\n    console.log('Meta Colony address: ' + metaColonyClient.contract.address);\n    const setState = this.setState.bind(this);\n    setState({ meta: metaColonyAddress })\n\n    const colonyClient = await networkClient.getColonyClient(2);\n    const colonyAddress = colonyClient.contract.address\n    setState({ colony_1: colonyAddress })\n\n    const colonyClient_2 = await networkClient.getColonyClient(3);\n    const colonyAddress_2 = colonyClient_2.contract.address\n    setState({ colony_2: colonyAddress_2 })\n  }\n\n  render() {\n    return (\n      <div className=\"container has-text-centered\">\n        <h1 className=\"title\">Colony Information</h1>\n        <div className=\"content has-text-centered\">\n          <h2 className=\"subtitle\">Meta Colony</h2>\n          <p>Meta Colony Address: {this.state.data === null ?\n            <code>Loading...</code> : <code>{this.state.meta}</code>}</p>\n          <h2 className=\"subtitle\">Colonies</h2>\n          <p>Colony 1 Address: {this.state.colony === null ?\n            <code>Loading...</code> : <code>{this.state.colony_1}</code>}</p>\n          <p>Colony 2 Address: {this.state.colony === null ?\n            <code>Loading...</code> : <code>{this.state.colony_2}</code>}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MyComponent","import React from 'react'\n\nrequire(\"babel-core/register\");\nrequire(\"babel-polyfill\");\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      token: null,\n      colony_id: null,\n      colony_add: null,\n    }\n  }\n\n  componentDidMount() {\n    this.fetchColony()\n  }\n\n  async fetchColony() {\n    // Import the prerequisites\n    const { providers, Wallet } = require('ethers');\n    const { default: EthersAdapter } = require('@colony/colony-js-adapter-ethers');\n    const { TrufflepigLoader } = require('@colony/colony-js-contract-loader-http');\n    // Import the ColonyNetworkClient\n    const { default: ColonyNetworkClient } = require('@colony/colony-js-client');\n    // Create an instance of the Trufflepig contract loader\n    const loader = new TrufflepigLoader();\n    // Create a provider for local TestRPC (Ganache)\n    const provider = new providers.JsonRpcProvider('http://localhost:8545/');\n    // Get the private key from the first account from the ganache-accounts\n    // through trufflepig\n    const { privateKey } = await loader.getAccount(0);\n\n    // Create a wallet with the private key (so we have a balance we can use)\n    const wallet = new Wallet(privateKey, provider);\n\n    // Create an adapter (powered by ethers)\n    const adapter = new EthersAdapter({\n      loader,\n      provider,\n      wallet,\n    });\n\n    // Connect to ColonyNetwork with the adapter!\n    const networkClient = new ColonyNetworkClient({ adapter });\n    await networkClient.init();\n\n    const tokenAddress = await networkClient.createToken({\n      name: 'Cool Colony Token',\n      symbol: 'COLNY',\n    });\n    console.log('Token address: ' + tokenAddress);\n  \n    // Create a cool Colony!\n    const {\n      eventData: { colonyId, colonyAddress },\n    } = await networkClient.createColony.send({ tokenAddress });\n  \n    // Congrats, you've created a Colony!\n    console.log('Colony ID: ' + colonyId);\n    console.log('Colony address: ' + colonyAddress);\n  \n    const setState = this.setState.bind(this);\n    setState({ token: tokenAddress })\n    setState({ colony_id: colonyId })\n    setState({ colony_add: colonyAddress })\n  }\n\n  render() {\n    return (\n      <div className=\"container has-text-centered\">\n        <h1 className=\"title\">Profile Information</h1>\n        <section className=\"pt-60 pb-60\">\n          <div className=\"container\">\n            <div className=\"content\">\n              <p>Profile Page</p>\n              <p>Personal Token Address: {this.state.token === null ?\n            <code>Loading...</code> : <code>{this.state.token}</code>}</p>\n            <p>Personal Colony ID: {this.state.colony_id === null ?\n            <code>Loading...</code> : <code>{this.state.colony_id}</code>}</p>\n            <p>Personal Colony Address: {this.state.colony_add === null ?\n            <code>Loading...</code> : <code>{this.state.colony_add}</code>}</p>\n            </div>\n          </div>\n        </section>\n      </div>\n    )\n  }\n}\n\nexport default MyComponent","import React from 'react';\nimport ProjectsAPI from '../api';\n\n\nconst Projects = () => (\n<div>\n    <section className=\"pt-20 pb-20 has-background-white-ter\">\n      <div className=\"container\"> \n        <input className=\"input\" type=\"text\" placeholder=\"Text input\"/>\n      </div>\n    </section>\n    <section className=\"has-background-white-ter pb-40 h100\">\n      <div className=\"container\">\n      {\n        ProjectsAPI.all().map(project => ( \n        <div className=\"card\" key={project.number}> \n          <div className=\"card-header card-content\"> \n            <div className=\"media\">\n              <div className=\"media-left\">\n                <figure className=\"image is-48x48\"><img className=\"avatar-small\" src=\"https://bulma.io/images/placeholders/96x96.png\" alt=\"Placeholder image\"/></figure>\n              </div>\n            </div>\n            <div className=\"media-content\">\n              <p className=\"title is-6\">{project.org.name}</p>\n              <p className=\"subtitle is-6\">{project.org.desc}</p>\n            </div>\n            <div className=\"time\">{project.timeadded}</div>\n          </div>\n          <div className=\"card-content\">\n            {project.name}\n            {project.desc}\n          </div> \n\n          \n             {project.tasks.map(task => \n\n              <div className=\"card-content\" key={task.number}>\n                <div className=\"columns tasks\" >\n                  <div className=\"column is-one-third\">\n                    <div className=\"name title is-6\">{task.name}</div>\n                    <div className=\"description subtitle is-6\">{task.desc}</div>\n                  </div>\n                  <div className=\"column\"><a className=\"button is-info is-outlined\" href=\"#\">Apply now</a></div>\n                </div>\n              </div>\n              )}\n\n        </div> \n            \n         )) }  \n      </div> \n    </section>\n</div>\n)\n\nexport default Projects","require(\"babel-core/register\");\nrequire(\"babel-polyfill\");\n\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App';\n\nrender((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('app'));"]}